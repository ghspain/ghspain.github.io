version: '3'

vars:
  PORT: 8000

tasks:
  dev:
    desc: "Servidor de desarrollo local"
    cmds:
      - echo "Iniciando servidor en http://localhost:{{.PORT}}"
      - python3 -m http.server {{.PORT}} --directory .

  dev-port:
    desc: "Servidor de desarrollo en puerto personalizado"
    cmds:
      - echo "[INFO] Iniciando servidor de desarrollo en puerto {{.CLI_ARGS}}"
      - echo "[INFO] URL http://localhost:{{.CLI_ARGS}}"
      - echo "[INFO] Presiona Ctrl+C para detener el servidor"
      - python3 -m http.server {{.CLI_ARGS}} --directory .

  dev-validate:
    desc: "Servidor con validación HTML previa"
    deps: [validate-html]
    cmds:
      - task: dev

  check:
    desc: "Verificar dependencias del sistema"
    cmds:
      - echo "[INFO] Verificando dependencias..."
      - python3 --version || echo "[WARN] Python3 no encontrado"
      - git --version || echo "[WARN] Git no encontrado"
      - task --version && echo "[INFO] Sistema listo para desarrollo"

  validate-html:
    desc: "Valida HTML básico"
    cmds:
      - echo "[INFO] Validando HTML..."
      - |
        if command -v tidy >/dev/null 2>&1; then
          tidy -q -e index.html && echo "[INFO] HTML válido" || echo "[WARN] HTML contiene advertencias"
        else
          echo "[DEBUG] tidy no instalado, saltando validación HTML"
        fi

  help:
    desc: "Mostrar ayuda de comandos disponibles"
    cmds:
      - echo "Uso de Taskfile para GitHub Community Spain"
      - echo ""
      - echo "COMANDOS PRINCIPALES:"
      - echo "  task dev                    Servidor de desarrollo (puerto 8000)"
      - echo "  task dev-port -- 3000       Servidor en puerto personalizado"
      - echo "  task dev-validate           Servidor con validación HTML previa"
      - echo "  task check                  Verificar dependencias del sistema"
      - echo ""
      - echo "COMANDOS DE DESARROLLO:"
      - echo "  task validate-html          Validar HTML"
      - echo "  task optimize               Optimizar recursos web"
      - echo "  task check-links            Verificar enlaces rotos"
      - echo ""
      - echo "COMANDOS DE OPTIMIZACIÓN:"
      - echo "  task minify-css             Minificar CSS"
      - echo "  task convert-images-to-webp Convertir imágenes a WebP"
      - echo "  task minify-images          Optimizar imágenes"
      - echo ""
      - echo "Ejemplos:"
      - echo "  task dev                    # Servidor en puerto 8000"
      - echo "  task dev-port -- 3000       # Servidor en puerto 3000"
      - echo "  task dev-validate           # Servidor con validación previa"
      - echo "  task help                   # Mostrar esta ayuda"

  optimize:
    desc: "Optimiza recursos web"
    cmds:
      - task: minify-css
      - task: convert-images-to-webp
      - task: minify-images
      - echo "[INFO] Optimización completada"

  minify-css:
    desc: "Minifica CSS si existe minificador"
    cmds:
      - |
        if command -v cleancss >/dev/null 2>&1; then
          cleancss -o style.min.css style.css
          echo "[INFO] CSS minificado creado"
        else
          echo "[DEBUG] clean-css no instalado, copiando CSS original"
          cp style.css style.min.css
        fi

  convert-images-to-webp:
    desc: "Convierte imágenes a formato WebP"
    cmds:
      - |
        if command -v cwebp >/dev/null 2>&1; then
          for img in *.png; do
            if [[ -f "$img" ]]; then
              cwebp -q 80 "$img" -o "${img%.png}.webp"
              echo "[INFO] Convertido $img a WebP"
            fi
          done
        else
          echo "[DEBUG] cwebp no instalado, saltando conversión a WebP"
        fi

  minify-images:
    desc: "Optimiza imágenes"
    cmds:
      - |
        if command -v oxipng >/dev/null 2>&1; then
          for img in *.png; do
            if [[ -f "$img" ]]; then
              oxipng -o 2 "$img"
              echo "[INFO] Imagen $img optimizada"
            fi
          done
        else
          echo "[DEBUG] oxipng no instalado, saltando optimización de imágenes"
        fi

  check-links:
    desc: "Verifica enlaces rotos"
    cmds:
      - echo "[INFO] Verificando enlaces..."
      - |
        grep -o 'href="[^"]*"' index.html | sed 's/href="//;s/"//' | while read -r url; do
          if [[ "$url" =~ ^https?:// ]]; then
            if command -v curl >/dev/null 2>&1; then
              status=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "ERROR")
              echo "[$status] $url"
            fi
          fi
        done

  setup-dev:
    desc: "Configura entorno de desarrollo"
    cmds:
      - echo "[INFO] Verificando herramientas..."
      - python3 --version || echo "[WARN] Python3 no encontrado"
      - git --version || echo "[WARN] Git no encontrado"
      - echo "[INFO] Configuración completa"
